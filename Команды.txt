C:\Users\User\PycharmProjects\myPyTests\pythonProjectD2\D2>py manage.py makemigrations
Migrations for 'basedata':
  basedata\migrations\0001_initial.py
    - Create model Author
    - Create model Category
    - Create model Post
    - Create model PostCategory
    - Add field postCategory to post
    - Create model Comment


C:\Users\User\PycharmProjects\myPyTests\pythonProjectD2\D2>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, basedata, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying basedata.0001_initial... OK
  Applying sessions.0001_initial... OK




>>> from basedata.models import *
>>> u1 = User.objects.create_user(username='Зилибоба')
>>> u1
<User: Зилибоба>
>>> u2 = User.objects.create_user(username='Петросян')
>>> u2
<User: Петросян>
>>> Author.objects.create(authorUser=u1)
<Author: Author object (1)>
>>> Author.objects.create(authorUser=u2)
<Author: Author object (2)>
>>> Category.objects.create(name='IT')
<Category: Category object (1)>
>>> Category.objects.create(name='NW')
<Category: Category object (2)>
>>> Category.objects.create(name='MD')
<Category: Category object (3)>
>>> Category.objects.create(name='HR')
<Category: Category object (4)>
>>> author = Author.objects.get(id=1)
>>> Post.objects.create(author=author, categoryType='NW', title='sometitle', text='sumbigtext')
<Post: Post object (1)>
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle', text='sumbigtext')
<Post: Post object (2)>
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle', text='sumbigtext')
<Post: Post object (3)>
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text = 'что за взор?')
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text = 'сойдет')
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text = 'Великолепная статья!')
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text = 'Великолепная статья!')
<Comment: Comment object (4)>
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).rating
1
>>> Post.objects.get(id=1).rating
0
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).rating
3
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=2).rating
2
>>> Author.objects.get(id=1).update_rating()
>>> Comment.objects.get(id=2).ratingAuthor
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Comment' object has no attribute 'ratingAuthor'
>>> Auhort.objects.get(id=2).ratingAuthor
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Auhort' is not defined
>>> Author.objects.get(id=2).ratingAuthor
0
>>> Author.objects.get(id=1).ratingAuthor
21
>>> Author.objects.get(id=2).update_rating()
>>> best_author = Author.objects.order_by('-ratingAuthor')[:1]
>>> Author.objects.get(id=best_author).authorUser.username
'Зилибоба'
>>> Author.objects.get(id=best_author).ratingAuthor
21
>>> best_post = Post.objects.order_by('-rating')[:1]
>>> Post.objects.get(id=best_post).dateCreation
datetime.datetime(2022, 1, 11, 9, 46, 33, 374906, tzinfo=datetime.timezone.utc)
>>> Post.objects.get(id=best_post).author.authorUser.username
'Зилибоба'
>>> Post.objects.get(id=best_post).rating
3
>>> Post.objects.get(id=best_post).title
'sometitle'
>>> Post.objects.get(id=best_post).preview()
'sumbigtext ... 3'
>>> Comment.objects.filter(commentPost_id=best_post).values('dateCreation', 'commentUser_id', 'rating', 'text')
<QuerySet [{'dateCreation': datetime.datetime(2022, 1, 11, 10, 4, 13, 724851, tzinfo=datetime.timezone.utc), 'commentUser_id': 1, 'rating': 1, 'text': 'что за взор?'}, {'dat
eCreation': datetime.datetime(2022, 1, 11, 10, 6, 20, 461224, tzinfo=datetime.timezone.utc), 'commentUser_id': 2, 'rating': 0, 'text': 'Великолепная статья!'}]>
>>>